#!/bin/bash

### BEGIN INIT INFO
# Provides:				openerp-server-@NAME@
# Required-Start:		$syslog
# Required-Stop:		$syslog
# Should-Start:			$network
# Should-Stop:			$network
# Default-Start:		2 3 4 5
# Default-Stop:			0 1 6
# Short-Description:	OpenERP - Enterprise Resource Management software
# Description:			OpenERP is a complete ERP and CRM software.
### END INIT INFO

SERVERNAME=@NAME@
BASE_PATH=@PATH@
USER=@USER@

PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin
DAEMON=${BASE_PATH}/bin/openerp-server-${SERVERNAME}
NAME=openerp-server-${SERVERNAME}
DESC="OpenERP server"
PIDDIR=/var/run/openerp
PIDFILE=${PIDDIR}/${SERVERNAME}/server.pid
CONFIGFILE=/etc/openerp/5.0/server/${SERVERNAME}.conf
DAEMON_OPTS="--config=$CONFIGFILE"

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Exit if the config file doesn't exist
[ -f "$CONFIGFILE" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh
VERBOSE="yes"

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

PROCNAME=openerp_$SERVERNAME
PROCNAME=${PROCNAME:0:15}

if [ ! -d $PIDDIR/$SERVERNAME ]; then
	mkdir -p $PIDDIR/$SERVERNAME
	chown -R ${USER}:openerp $PIDDIR
fi

check_process() {
	if [[ `ps -A | grep -c $PROCNAME` == 0 ]]; then
		return 0
	else
		i=10
		while [[ $i > 0 ]]; do
			if [[ -e $PIDFILE ]]; then
				return 0
			else
				i=$i-1
			fi
		done
	fi
	return 1
}

do_start() {
	mkdir -p /var/run/openerp/${SERVERNAME}
	chown -R ${USER}:openerp /var/run/openerp/${SERVERNAME}
	chmod g+w /var/run/openerp/${SERVERNAME}
	
	start-stop-daemon --start --quiet  --background \
		--pidfile $PIDFILE --chuid $USER:openerp --name $PROCNAME \
		--startas $DAEMON -- $DAEMON_OPTS

	check_process
	return $?
}

do_stop() {
	start-stop-daemon --stop --quiet --oknodo \
	--retry TERM/5/KILL/3 \
	--pidfile $PIDFILE --name $PROCNAME

	return $?
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
